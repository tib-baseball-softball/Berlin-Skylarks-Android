// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Finds Teams by ID or all of them
    ///
    /// Gets all teams in a reduced data set or the team specified by ID.
    ///
    /// - Remark: HTTP `GET /api/v2/teams`.
    /// - Remark: Generated from `#/paths//api/v2/teams/get(GetTeams)`.
    func getTeams(_ input: Operations.GetTeams.Input) async throws -> Operations.GetTeams.Output
    /// Finds Game Reports by filters
    ///
    /// Gets all game reports or the player specified by ID.
    ///
    /// - Remark: HTTP `GET /api/v2/gamereports`.
    /// - Remark: Generated from `#/paths//api/v2/gamereports/get(GetGameReports)`.
    func getGameReports(_ input: Operations.GetGameReports.Input) async throws -> Operations.GetGameReports.Output
    /// Fetch Players
    ///
    /// Retrieves a list of players or a specific player based on provided query parameters.
    ///
    /// - Remark: HTTP `GET /api/v2/players`.
    /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)`.
    func getPlayers(_ input: Operations.GetPlayers.Input) async throws -> Operations.GetPlayers.Output
    /// Retrieve training times
    ///
    /// Fetches training times with optional filtering by team.
    ///
    /// - Remark: HTTP `GET /api/v2/trainings`.
    /// - Remark: Generated from `#/paths//api/v2/trainings/get(getTrainingTimes)`.
    func getTrainingTimes(_ input: Operations.GetTrainingTimes.Input) async throws -> Operations.GetTrainingTimes.Output
    /// Status Check
    ///
    /// Shows brief status message if API is available
    ///
    /// - Remark: HTTP `GET /api/check`.
    /// - Remark: Generated from `#/paths//api/check/get(StatusCheck)`.
    func statusCheck(_ input: Operations.StatusCheck.Input) async throws -> Operations.StatusCheck.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Finds Teams by ID or all of them
    ///
    /// Gets all teams in a reduced data set or the team specified by ID.
    ///
    /// - Remark: HTTP `GET /api/v2/teams`.
    /// - Remark: Generated from `#/paths//api/v2/teams/get(GetTeams)`.
    internal func getTeams(
        query: Operations.GetTeams.Input.Query = .init(),
        headers: Operations.GetTeams.Input.Headers = .init()
    ) async throws -> Operations.GetTeams.Output {
        try await getTeams(Operations.GetTeams.Input(
            query: query,
            headers: headers
        ))
    }
    /// Finds Game Reports by filters
    ///
    /// Gets all game reports or the player specified by ID.
    ///
    /// - Remark: HTTP `GET /api/v2/gamereports`.
    /// - Remark: Generated from `#/paths//api/v2/gamereports/get(GetGameReports)`.
    internal func getGameReports(
        query: Operations.GetGameReports.Input.Query = .init(),
        headers: Operations.GetGameReports.Input.Headers = .init()
    ) async throws -> Operations.GetGameReports.Output {
        try await getGameReports(Operations.GetGameReports.Input(
            query: query,
            headers: headers
        ))
    }
    /// Fetch Players
    ///
    /// Retrieves a list of players or a specific player based on provided query parameters.
    ///
    /// - Remark: HTTP `GET /api/v2/players`.
    /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)`.
    internal func getPlayers(
        query: Operations.GetPlayers.Input.Query = .init(),
        headers: Operations.GetPlayers.Input.Headers = .init()
    ) async throws -> Operations.GetPlayers.Output {
        try await getPlayers(Operations.GetPlayers.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieve training times
    ///
    /// Fetches training times with optional filtering by team.
    ///
    /// - Remark: HTTP `GET /api/v2/trainings`.
    /// - Remark: Generated from `#/paths//api/v2/trainings/get(getTrainingTimes)`.
    internal func getTrainingTimes(
        query: Operations.GetTrainingTimes.Input.Query = .init(),
        headers: Operations.GetTrainingTimes.Input.Headers = .init()
    ) async throws -> Operations.GetTrainingTimes.Output {
        try await getTrainingTimes(Operations.GetTrainingTimes.Input(
            query: query,
            headers: headers
        ))
    }
    /// Status Check
    ///
    /// Shows brief status message if API is available
    ///
    /// - Remark: HTTP `GET /api/check`.
    /// - Remark: Generated from `#/paths//api/check/get(StatusCheck)`.
    internal func statusCheck() async throws -> Operations.StatusCheck.Output {
        try await statusCheck(Operations.StatusCheck.Input())
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    /// Production
    internal enum Server1 {
        /// Production
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://www.tib-baseball.de",
                variables: []
            )
        }
    }
    /// Production
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://www.tib-baseball.de",
            variables: []
        )
    }
    /// Development
    internal enum Server2 {
        /// Development
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://skylarks-hp.ddev.site",
                variables: []
            )
        }
    }
    /// Development
    @available(*, deprecated, renamed: "Servers.Server2.url")
    internal static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://skylarks-hp.ddev.site",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// A BSM LeagueGroup scoped to a single season
        ///
        /// - Remark: Generated from `#/components/schemas/League`.
        internal struct League: Codable, Hashable, Sendable {
            /// Name of the league
            ///
            /// - Remark: Generated from `#/components/schemas/League/name`.
            internal var name: Swift.String
            /// Acronym of the league
            ///
            /// - Remark: Generated from `#/components/schemas/League/acronym`.
            internal var acronym: Swift.String
            /// The season year
            ///
            /// - Remark: Generated from `#/components/schemas/League/season`.
            internal var season: Swift.Int
            /// Unique identifier for the league
            ///
            /// - Remark: Generated from `#/components/schemas/League/league_id`.
            internal var leagueId: Swift.Int
            /// Creates a new `League`.
            ///
            /// - Parameters:
            ///   - name: Name of the league
            ///   - acronym: Acronym of the league
            ///   - season: The season year
            ///   - leagueId: Unique identifier for the league
            internal init(
                name: Swift.String,
                acronym: Swift.String,
                season: Swift.Int,
                leagueId: Swift.Int
            ) {
                self.name = name
                self.acronym = acronym
                self.season = season
                self.leagueId = leagueId
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case acronym
                case season
                case leagueId = "league_id"
            }
        }
        /// Details of an (internal) team. Completely scoped to this project. Not identical to/dependent on BSM definitions Team, League and LeagueGroup.
        ///
        /// - Remark: Generated from `#/components/schemas/Team`.
        internal struct Team: Codable, Hashable, Sendable {
            /// TYPO3-internal unique identifier for the team.
            ///
            /// - Remark: Generated from `#/components/schemas/Team/uid`.
            internal var uid: Swift.Int
            /// Full name of the team.
            ///
            /// - Remark: Generated from `#/components/schemas/Team/name`.
            internal var name: Swift.String
            /// TYPO3-internal uid of imported BSM league
            ///
            /// - Remark: Generated from `#/components/schemas/Team/bsm_league`.
            internal var bsmLeague: Swift.Int
            /// Identifier for the team's league in the BSM system.
            ///
            /// - Remark: Generated from `#/components/schemas/Team/league_id`.
            internal var leagueId: Swift.Int
            /// Short name of the team's league in the BSM system.
            ///
            /// - Remark: Generated from `#/components/schemas/Team/bsm_short_name`.
            internal var bsmShortName: Swift.String
            /// Creates a new `Team`.
            ///
            /// - Parameters:
            ///   - uid: TYPO3-internal unique identifier for the team.
            ///   - name: Full name of the team.
            ///   - bsmLeague: TYPO3-internal uid of imported BSM league
            ///   - leagueId: Identifier for the team's league in the BSM system.
            ///   - bsmShortName: Short name of the team's league in the BSM system.
            internal init(
                uid: Swift.Int,
                name: Swift.String,
                bsmLeague: Swift.Int,
                leagueId: Swift.Int,
                bsmShortName: Swift.String
            ) {
                self.uid = uid
                self.name = name
                self.bsmLeague = bsmLeague
                self.leagueId = leagueId
                self.bsmShortName = bsmShortName
            }
            internal enum CodingKeys: String, CodingKey {
                case uid
                case name
                case bsmLeague = "bsm_league"
                case leagueId = "league_id"
                case bsmShortName = "bsm_short_name"
            }
        }
        /// TYPO3 file reference object
        ///
        /// - Remark: Generated from `#/components/schemas/Media`.
        internal struct Media: Codable, Hashable, Sendable {
            /// Unique identifier of the image
            ///
            /// - Remark: Generated from `#/components/schemas/Media/uid`.
            internal var uid: Swift.Int
            /// Title of the image
            ///
            /// - Remark: Generated from `#/components/schemas/Media/title`.
            internal var title: Swift.String?
            /// Alt text for the image
            ///
            /// - Remark: Generated from `#/components/schemas/Media/alt`.
            internal var alt: Swift.String?
            /// Caption for the image
            ///
            /// - Remark: Generated from `#/components/schemas/Media/caption`.
            internal var caption: Swift.String?
            /// Copyright information for the image
            ///
            /// - Remark: Generated from `#/components/schemas/Media/copyright`.
            internal var copyright: Swift.String?
            /// URL to the image
            ///
            /// - Remark: Generated from `#/components/schemas/Media/url`.
            internal var url: Swift.String
            /// Creates a new `Media`.
            ///
            /// - Parameters:
            ///   - uid: Unique identifier of the image
            ///   - title: Title of the image
            ///   - alt: Alt text for the image
            ///   - caption: Caption for the image
            ///   - copyright: Copyright information for the image
            ///   - url: URL to the image
            internal init(
                uid: Swift.Int,
                title: Swift.String? = nil,
                alt: Swift.String? = nil,
                caption: Swift.String? = nil,
                copyright: Swift.String? = nil,
                url: Swift.String
            ) {
                self.uid = uid
                self.title = title
                self.alt = alt
                self.caption = caption
                self.copyright = copyright
                self.url = url
            }
            internal enum CodingKeys: String, CodingKey {
                case uid
                case title
                case alt
                case caption
                case copyright
                case url
            }
        }
        /// Player response object
        ///
        /// - Remark: Generated from `#/components/schemas/Player`.
        internal struct Player: Codable, Hashable, Sendable {
            /// The unique identifier for the player.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/uid`.
            internal var uid: Swift.Int
            /// TYPO3 page id for the player row.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/pid`.
            internal var pid: Swift.Int
            /// The full name of the player.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/fullname`.
            internal var fullname: Swift.String
            /// The first name of the player.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/firstname`.
            internal var firstname: Swift.String
            /// The last name of the player.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/lastname`.
            internal var lastname: Swift.String
            /// The player's birthday as a Unix timestamp.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/birthday`.
            internal var birthday: Swift.Int?
            /// The date of admission for the player (no readable date format)
            ///
            /// - Remark: Generated from `#/components/schemas/Player/admission`.
            internal var admission: Swift.String?
            /// The player's jersey number.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/number`.
            internal var number: Swift.String
            /// The throwing hand of the player (Right, Left, or Switch).
            ///
            /// - Remark: Generated from `#/components/schemas/Player/throwing`.
            internal var throwing: Swift.String
            /// The batting hand of the player (Right, Left, or Switch).
            ///
            /// - Remark: Generated from `#/components/schemas/Player/batting`.
            internal var batting: Swift.String
            /// The team the player is a coach for, if any.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/coach`.
            internal var coach: Swift.String?
            /// The slug for the player.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/slug`.
            internal var slug: Swift.String?
            /// The player's BSM ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/bsm_id`.
            internal var bsmId: Swift.Int
            /// The player's media items.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/media`.
            internal var media: [Components.Schemas.Media]?
            /// The positions the player can play.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/positions`.
            internal var positions: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Player/TeamsPayload`.
            internal struct TeamsPayloadPayload: Codable, Hashable, Sendable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/components/schemas/Player/TeamsPayload/uid`.
                internal var uid: Swift.Int?
                /// The name of the team.
                ///
                /// - Remark: Generated from `#/components/schemas/Player/TeamsPayload/name`.
                internal var name: Swift.String?
                /// Creates a new `TeamsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - uid: The unique identifier of the team.
                ///   - name: The name of the team.
                internal init(
                    uid: Swift.Int? = nil,
                    name: Swift.String? = nil
                ) {
                    self.uid = uid
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case uid
                    case name
                }
            }
            /// The teams the player is associated with.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/teams`.
            internal typealias TeamsPayload = [Components.Schemas.Player.TeamsPayloadPayload]
            /// The teams the player is associated with.
            ///
            /// - Remark: Generated from `#/components/schemas/Player/teams`.
            internal var teams: Components.Schemas.Player.TeamsPayload
            /// Creates a new `Player`.
            ///
            /// - Parameters:
            ///   - uid: The unique identifier for the player.
            ///   - pid: TYPO3 page id for the player row.
            ///   - fullname: The full name of the player.
            ///   - firstname: The first name of the player.
            ///   - lastname: The last name of the player.
            ///   - birthday: The player's birthday as a Unix timestamp.
            ///   - admission: The date of admission for the player (no readable date format)
            ///   - number: The player's jersey number.
            ///   - throwing: The throwing hand of the player (Right, Left, or Switch).
            ///   - batting: The batting hand of the player (Right, Left, or Switch).
            ///   - coach: The team the player is a coach for, if any.
            ///   - slug: The slug for the player.
            ///   - bsmId: The player's BSM ID.
            ///   - media: The player's media items.
            ///   - positions: The positions the player can play.
            ///   - teams: The teams the player is associated with.
            internal init(
                uid: Swift.Int,
                pid: Swift.Int,
                fullname: Swift.String,
                firstname: Swift.String,
                lastname: Swift.String,
                birthday: Swift.Int? = nil,
                admission: Swift.String? = nil,
                number: Swift.String,
                throwing: Swift.String,
                batting: Swift.String,
                coach: Swift.String? = nil,
                slug: Swift.String? = nil,
                bsmId: Swift.Int,
                media: [Components.Schemas.Media]? = nil,
                positions: [Swift.String]? = nil,
                teams: Components.Schemas.Player.TeamsPayload
            ) {
                self.uid = uid
                self.pid = pid
                self.fullname = fullname
                self.firstname = firstname
                self.lastname = lastname
                self.birthday = birthday
                self.admission = admission
                self.number = number
                self.throwing = throwing
                self.batting = batting
                self.coach = coach
                self.slug = slug
                self.bsmId = bsmId
                self.media = media
                self.positions = positions
                self.teams = teams
            }
            internal enum CodingKeys: String, CodingKey {
                case uid
                case pid
                case fullname
                case firstname
                case lastname
                case birthday
                case admission
                case number
                case throwing
                case batting
                case coach
                case slug
                case bsmId = "bsm_id"
                case media
                case positions
                case teams
            }
        }
        /// Details of a training session.
        ///
        /// - Remark: Generated from `#/components/schemas/Training`.
        internal struct Training: Codable, Hashable, Sendable {
            /// Unique identifier for the training session.
            ///
            /// - Remark: Generated from `#/components/schemas/Training/uid`.
            internal var uid: Swift.Int
            /// Identifier for the season associated with the training session. 0 = Summer, 1 = Winter
            ///
            /// - Remark: Generated from `#/components/schemas/Training/season`.
            internal enum SeasonPayload: Int, Codable, Hashable, Sendable, CaseIterable {
                case _0 = 0
                case _1 = 1
            }
            /// Identifier for the season associated with the training session. 0 = Summer, 1 = Winter
            ///
            /// - Remark: Generated from `#/components/schemas/Training/season`.
            internal var season: Components.Schemas.Training.SeasonPayload
            /// Numeric representation of the day of the week (e.g., 1 = Monday).
            ///
            /// - Remark: Generated from `#/components/schemas/Training/day`.
            internal enum DayPayload: Int, Codable, Hashable, Sendable, CaseIterable {
                case _0 = 0
                case _1 = 1
                case _2 = 2
                case _3 = 3
                case _4 = 4
                case _5 = 5
                case _6 = 6
            }
            /// Numeric representation of the day of the week (e.g., 1 = Monday).
            ///
            /// - Remark: Generated from `#/components/schemas/Training/day`.
            internal var day: Components.Schemas.Training.DayPayload
            /// Start time of the training session in seconds from midnight (24-hour clock).
            ///
            /// - Remark: Generated from `#/components/schemas/Training/starttime`.
            internal var starttime: Swift.Int
            /// End time of the training session in seconds from midnight (24-hour clock).
            ///
            /// - Remark: Generated from `#/components/schemas/Training/endtime`.
            internal var endtime: Swift.Int
            /// Location where the training session is held.
            ///
            /// - Remark: Generated from `#/components/schemas/Training/location`.
            internal var location: Swift.String
            /// Additional notes or information about the training session.
            ///
            /// - Remark: Generated from `#/components/schemas/Training/extra`.
            internal var extra: Swift.String?
            /// Identifier for the team (internal uid) associated with the training session.
            ///
            /// - Remark: Generated from `#/components/schemas/Training/team`.
            internal var team: Swift.Int
            /// Name of the team associated with the training session.
            ///
            /// - Remark: Generated from `#/components/schemas/Training/teamname`.
            internal var teamname: Swift.String
            /// Human-readable representation of the day of the week.
            ///
            /// - Remark: Generated from `#/components/schemas/Training/human_day`.
            internal var humanDay: Swift.String?
            /// Human-readable representation of the season.
            ///
            /// - Remark: Generated from `#/components/schemas/Training/human_season`.
            internal var humanSeason: Swift.String?
            /// Creates a new `Training`.
            ///
            /// - Parameters:
            ///   - uid: Unique identifier for the training session.
            ///   - season: Identifier for the season associated with the training session. 0 = Summer, 1 = Winter
            ///   - day: Numeric representation of the day of the week (e.g., 1 = Monday).
            ///   - starttime: Start time of the training session in seconds from midnight (24-hour clock).
            ///   - endtime: End time of the training session in seconds from midnight (24-hour clock).
            ///   - location: Location where the training session is held.
            ///   - extra: Additional notes or information about the training session.
            ///   - team: Identifier for the team (internal uid) associated with the training session.
            ///   - teamname: Name of the team associated with the training session.
            ///   - humanDay: Human-readable representation of the day of the week.
            ///   - humanSeason: Human-readable representation of the season.
            internal init(
                uid: Swift.Int,
                season: Components.Schemas.Training.SeasonPayload,
                day: Components.Schemas.Training.DayPayload,
                starttime: Swift.Int,
                endtime: Swift.Int,
                location: Swift.String,
                extra: Swift.String? = nil,
                team: Swift.Int,
                teamname: Swift.String,
                humanDay: Swift.String? = nil,
                humanSeason: Swift.String? = nil
            ) {
                self.uid = uid
                self.season = season
                self.day = day
                self.starttime = starttime
                self.endtime = endtime
                self.location = location
                self.extra = extra
                self.team = team
                self.teamname = teamname
                self.humanDay = humanDay
                self.humanSeason = humanSeason
            }
            internal enum CodingKeys: String, CodingKey {
                case uid
                case season
                case day
                case starttime
                case endtime
                case location
                case extra
                case team
                case teamname
                case humanDay = "human_day"
                case humanSeason = "human_season"
            }
        }
        /// Game report
        ///
        /// - Remark: Generated from `#/components/schemas/GameReport`.
        internal struct GameReport: Codable, Hashable, Sendable {
            /// Unique identifier for the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/uid`.
            internal var uid: Swift.Int
            /// The author of the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/author`.
            internal var author: Swift.String
            /// The unique ID of the game (readable BSM ID, not simple number)
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/game_id`.
            internal var gameId: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameReport/league`.
            internal var league: Components.Schemas.League
            /// The subject of the report (e.g., for Single Game or Doubleheader)
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/game_toggle`.
            internal enum GameTogglePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sg = "SG"
                case dh = "DH"
            }
            /// The subject of the report (e.g., for Single Game or Doubleheader)
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/game_toggle`.
            internal var gameToggle: Components.Schemas.GameReport.GameTogglePayload
            /// Short teaser text for the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/teaser_text`.
            internal var teaserText: Swift.String
            /// HTML introduction text for the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/introduction`.
            internal var introduction: Swift.String
            /// HTML content for the first part of the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/report_first`.
            internal var reportFirst: Swift.String
            /// HTML content for the second part of the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/report_second`.
            internal var reportSecond: Swift.String?
            /// HTML preview text for the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/preview`.
            internal var preview: Swift.String?
            /// List of teaser images for the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/teaser_image`.
            internal var teaserImage: [Components.Schemas.Media]
            /// - Remark: Generated from `#/components/schemas/GameReport/header_image`.
            internal var headerImage: Components.Schemas.Media?
            /// List of gallery images associated with the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/gallery`.
            internal var gallery: [Components.Schemas.Media]?
            /// The date and time of the game
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/date`.
            internal var date: Foundation.Date
            /// Title of the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/title`.
            internal var title: Swift.String
            /// ID of the team associated with the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/team`.
            internal var team: Swift.Int
            /// The unique slug for the game report
            ///
            /// - Remark: Generated from `#/components/schemas/GameReport/slug`.
            internal var slug: Swift.String
            /// Creates a new `GameReport`.
            ///
            /// - Parameters:
            ///   - uid: Unique identifier for the game report
            ///   - author: The author of the game report
            ///   - gameId: The unique ID of the game (readable BSM ID, not simple number)
            ///   - league:
            ///   - gameToggle: The subject of the report (e.g., for Single Game or Doubleheader)
            ///   - teaserText: Short teaser text for the game report
            ///   - introduction: HTML introduction text for the game report
            ///   - reportFirst: HTML content for the first part of the game report
            ///   - reportSecond: HTML content for the second part of the game report
            ///   - preview: HTML preview text for the game report
            ///   - teaserImage: List of teaser images for the game report
            ///   - headerImage:
            ///   - gallery: List of gallery images associated with the game report
            ///   - date: The date and time of the game
            ///   - title: Title of the game report
            ///   - team: ID of the team associated with the game report
            ///   - slug: The unique slug for the game report
            internal init(
                uid: Swift.Int,
                author: Swift.String,
                gameId: Swift.String,
                league: Components.Schemas.League,
                gameToggle: Components.Schemas.GameReport.GameTogglePayload,
                teaserText: Swift.String,
                introduction: Swift.String,
                reportFirst: Swift.String,
                reportSecond: Swift.String? = nil,
                preview: Swift.String? = nil,
                teaserImage: [Components.Schemas.Media],
                headerImage: Components.Schemas.Media? = nil,
                gallery: [Components.Schemas.Media]? = nil,
                date: Foundation.Date,
                title: Swift.String,
                team: Swift.Int,
                slug: Swift.String
            ) {
                self.uid = uid
                self.author = author
                self.gameId = gameId
                self.league = league
                self.gameToggle = gameToggle
                self.teaserText = teaserText
                self.introduction = introduction
                self.reportFirst = reportFirst
                self.reportSecond = reportSecond
                self.preview = preview
                self.teaserImage = teaserImage
                self.headerImage = headerImage
                self.gallery = gallery
                self.date = date
                self.title = title
                self.team = team
                self.slug = slug
            }
            internal enum CodingKeys: String, CodingKey {
                case uid
                case author
                case gameId = "game_id"
                case league
                case gameToggle = "game_toggle"
                case teaserText = "teaser_text"
                case introduction
                case reportFirst = "report_first"
                case reportSecond = "report_second"
                case preview
                case teaserImage = "teaser_image"
                case headerImage = "header_image"
                case gallery
                case date
                case title
                case team
                case slug
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Finds Teams by ID or all of them
    ///
    /// Gets all teams in a reduced data set or the team specified by ID.
    ///
    /// - Remark: HTTP `GET /api/v2/teams`.
    /// - Remark: Generated from `#/paths//api/v2/teams/get(GetTeams)`.
    internal enum GetTeams {
        internal static let id: Swift.String = "GetTeams"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v2/teams/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// ID of team to return
                ///
                /// - Remark: Generated from `#/paths/api/v2/teams/GET/query/id`.
                internal var id: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id: ID of team to return
                internal init(id: Swift.Int? = nil) {
                    self.id = id
                }
            }
            internal var query: Operations.GetTeams.Input.Query
            /// - Remark: Generated from `#/paths/api/v2/teams/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTeams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTeams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetTeams.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetTeams.Input.Query = .init(),
                headers: Operations.GetTeams.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v2/teams/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v2/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.Team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetTeams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetTeams.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The requested teams as JSON
            ///
            /// - Remark: Generated from `#/paths//api/v2/teams/get(GetTeams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetTeams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetTeams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// No teams found with specified parameters
            ///
            /// - Remark: Generated from `#/paths//api/v2/teams/get(GetTeams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetTeams.Output.NotFound)
            /// No teams found with specified parameters
            ///
            /// - Remark: Generated from `#/paths//api/v2/teams/get(GetTeams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.GetTeams.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// Creates a new `InternalServerError`.
                internal init() {}
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//api/v2/teams/get(GetTeams)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetTeams.Output.InternalServerError)
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//api/v2/teams/get(GetTeams)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.GetTeams.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Finds Game Reports by filters
    ///
    /// Gets all game reports or the player specified by ID.
    ///
    /// - Remark: HTTP `GET /api/v2/gamereports`.
    /// - Remark: Generated from `#/paths//api/v2/gamereports/get(GetGameReports)`.
    internal enum GetGameReports {
        internal static let id: Swift.String = "GetGameReports"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// TYPO3 ID of game report to return
                ///
                /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/query/uid`.
                internal var uid: Swift.Int?
                /// Human-readable BSM ID of the game in question
                ///
                /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/query/bsmMatchID`.
                internal var bsmMatchID: Swift.String?
                /// The team to query game reports for
                ///
                /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/query/team`.
                internal var team: Swift.Int?
                /// The league to query game reports for
                ///
                /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/query/league`.
                internal var league: Swift.Int?
                /// The season to query game reports for
                ///
                /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/query/season`.
                internal var season: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - uid: TYPO3 ID of game report to return
                ///   - bsmMatchID: Human-readable BSM ID of the game in question
                ///   - team: The team to query game reports for
                ///   - league: The league to query game reports for
                ///   - season: The season to query game reports for
                internal init(
                    uid: Swift.Int? = nil,
                    bsmMatchID: Swift.String? = nil,
                    team: Swift.Int? = nil,
                    league: Swift.Int? = nil,
                    season: Swift.Int? = nil
                ) {
                    self.uid = uid
                    self.bsmMatchID = bsmMatchID
                    self.team = team
                    self.league = league
                    self.season = season
                }
            }
            internal var query: Operations.GetGameReports.Input.Query
            /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetGameReports.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetGameReports.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetGameReports.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetGameReports.Input.Query = .init(),
                headers: Operations.GetGameReports.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v2/gamereports/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.GameReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.GameReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetGameReports.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetGameReports.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The requested game reports as JSON
            ///
            /// - Remark: Generated from `#/paths//api/v2/gamereports/get(GetGameReports)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetGameReports.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetGameReports.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// No game reports found with specified parameters
            ///
            /// - Remark: Generated from `#/paths//api/v2/gamereports/get(GetGameReports)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetGameReports.Output.NotFound)
            /// No game reports found with specified parameters
            ///
            /// - Remark: Generated from `#/paths//api/v2/gamereports/get(GetGameReports)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.GetGameReports.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// Creates a new `InternalServerError`.
                internal init() {}
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//api/v2/gamereports/get(GetGameReports)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetGameReports.Output.InternalServerError)
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//api/v2/gamereports/get(GetGameReports)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.GetGameReports.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch Players
    ///
    /// Retrieves a list of players or a specific player based on provided query parameters.
    ///
    /// - Remark: HTTP `GET /api/v2/players`.
    /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)`.
    internal enum GetPlayers {
        internal static let id: Swift.String = "getPlayers"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v2/players/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Unique (internal) identifier of the player to return.
                ///
                /// - Remark: Generated from `#/paths/api/v2/players/GET/query/id`.
                internal var id: Swift.Int?
                /// BSM / OPASO ID of the player to return.
                ///
                /// - Remark: Generated from `#/paths/api/v2/players/GET/query/bsmid`.
                internal var bsmid: Swift.Int?
                /// ID of the team to query players for.
                ///
                /// - Remark: Generated from `#/paths/api/v2/players/GET/query/team`.
                internal var team: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id: Unique (internal) identifier of the player to return.
                ///   - bsmid: BSM / OPASO ID of the player to return.
                ///   - team: ID of the team to query players for.
                internal init(
                    id: Swift.Int? = nil,
                    bsmid: Swift.Int? = nil,
                    team: Swift.Int? = nil
                ) {
                    self.id = id
                    self.bsmid = bsmid
                    self.team = team
                }
            }
            internal var query: Operations.GetPlayers.Input.Query
            /// - Remark: Generated from `#/paths/api/v2/players/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPlayers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPlayers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetPlayers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetPlayers.Input.Query = .init(),
                headers: Operations.GetPlayers.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v2/players/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v2/players/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Player])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.Player] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetPlayers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetPlayers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The requested players as JSON.
            ///
            /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetPlayers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetPlayers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                internal init() {}
            }
            /// Invalid query parameters provided.
            ///
            /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.GetPlayers.Output.BadRequest)
            /// Invalid query parameters provided.
            ///
            /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.GetPlayers.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// No players found with specified parameters.
            ///
            /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetPlayers.Output.NotFound)
            /// No players found with specified parameters.
            ///
            /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.GetPlayers.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// Creates a new `InternalServerError`.
                internal init() {}
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetPlayers.Output.InternalServerError)
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//api/v2/players/get(getPlayers)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.GetPlayers.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve training times
    ///
    /// Fetches training times with optional filtering by team.
    ///
    /// - Remark: HTTP `GET /api/v2/trainings`.
    /// - Remark: Generated from `#/paths//api/v2/trainings/get(getTrainingTimes)`.
    internal enum GetTrainingTimes {
        internal static let id: Swift.String = "getTrainingTimes"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v2/trainings/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Filter training times by team ID.
                ///
                /// - Remark: Generated from `#/paths/api/v2/trainings/GET/query/team`.
                internal var team: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - team: Filter training times by team ID.
                internal init(team: Swift.Int? = nil) {
                    self.team = team
                }
            }
            internal var query: Operations.GetTrainingTimes.Input.Query
            /// - Remark: Generated from `#/paths/api/v2/trainings/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTrainingTimes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTrainingTimes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetTrainingTimes.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetTrainingTimes.Input.Query = .init(),
                headers: Operations.GetTrainingTimes.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Training])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.Training] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetTrainingTimes.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetTrainingTimes.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of training times.
            ///
            /// - Remark: Generated from `#/paths//api/v2/trainings/get(getTrainingTimes)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetTrainingTimes.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetTrainingTimes.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/404/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/404/content/json`.
                    internal struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/404/content/json/message`.
                        internal var message: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        internal init(message: Swift.String? = nil) {
                            self.message = message
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case message
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/404/content/application\/json`.
                    case json(Operations.GetTrainingTimes.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.GetTrainingTimes.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetTrainingTimes.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetTrainingTimes.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No training times found.
            ///
            /// - Remark: Generated from `#/paths//api/v2/trainings/get(getTrainingTimes)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetTrainingTimes.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.GetTrainingTimes.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/500/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/500/content/json`.
                    internal struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/500/content/json/message`.
                        internal var message: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        internal init(message: Swift.String? = nil) {
                            self.message = message
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case message
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/v2/trainings/GET/responses/500/content/application\/json`.
                    case json(Operations.GetTrainingTimes.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.GetTrainingTimes.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetTrainingTimes.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetTrainingTimes.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//api/v2/trainings/get(getTrainingTimes)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetTrainingTimes.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Operations.GetTrainingTimes.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Status Check
    ///
    /// Shows brief status message if API is available
    ///
    /// - Remark: HTTP `GET /api/check`.
    /// - Remark: Generated from `#/paths//api/check/get(StatusCheck)`.
    internal enum StatusCheck {
        internal static let id: Swift.String = "StatusCheck"
        internal struct Input: Sendable, Hashable {
            /// Creates a new `Input`.
            internal init() {}
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//api/check/get(StatusCheck)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.StatusCheck.Output.Ok)
            /// OK
            ///
            /// - Remark: Generated from `#/paths//api/check/get(StatusCheck)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.StatusCheck.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
